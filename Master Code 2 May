#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>

const int soilPin = 33;
const int voltPin = 33;

// variable for storing the Soil and Battery voltages
int soilValue = 0;
int battValue = 0;
char battributes[100];

//Deep Sleep with Timer Wake Up
#define uS_TO_S_FACTOR 1E6  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SOIL_SLEEP  1800        /* Time ESP32 will go to sleep (in seconds) */
#define TIME_TO_BATT_SLEEP  3600
#define TIME_TO_DEEPBATT_SLEEP  10800
#define MQTT_RETRY 5000

RTC_DATA_ATTR int bootCount = 0;
const char* mqtt_server = "192.168.1.111";
const int mqtt_port = 1883;
const char* mqtt_topic = "Data/Soil";
const char* mqtt_client = "Andrew";
const char* user = "Andolyn";
const char* pwd = "Carolyn21";
int d = 0;


WiFiMulti wifiMulti;
WiFiClient espClient;
PubSubClient client(espClient);

void mqttconnect(){
  while (!client.connected()) {
    Serial.print("MQTT connecting ...");
    if (client.connect(mqtt_client,user,pwd)) {
      Serial.println("connected");
      client.subscribe("Control/#");
    } else {
      Serial.print("failed, status code =");
      Serial.print(client.state());
      Serial.println("try again in ");
      Serial.println(MQTT_RETRY);
      Serial.println(" seconds");
      delay(MQTT_RETRY);
      ESP.restart();
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void NetworkConnect(){
  wifiMulti.addAP("Andolyn Barn", "Carolyn21");
  wifiMulti.addAP("Andolyn Poolhouse", "Carolyn21");
  wifiMulti.addAP("Andolyn Estate", "Carolyn21");

  Serial.println("Connecting Wifi...");
  if(wifiMulti.run() == WL_CONNECTED){
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("Your IP address: ");
    Serial.println(WiFi.localIP());
    delay(3000);
  }
  if(wifiMulti.run() != WL_CONNECTED) {
    Serial.println("WiFi not connected!");
    delay(1000);
    esp_sleep_enable_timer_wakeup(TIME_TO_BATT_SLEEP * uS_TO_S_FACTOR);
    Serial.println("Setup ESP32 to sleep for every " + String(TIME_TO_BATT_SLEEP) +
    " Seconds");
    Serial.println("No Network Going to sleep now");
    delay(1000);
    Serial.flush(); 
    esp_deep_sleep_start();
  }   
}

void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;

  wakeup_reason = esp_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
  }
}

void getbatt(){
 int i; 
 int bv;
 bv= 0;
 for(i=0;i<10;i++) {
    delay(200); 
    battValue = analogRead(voltPin);
    Serial.println(battValue);
    bv = bv + battValue;
  }
  bv = bv/10;
  Serial.println("battValue is  ");
  Serial.println(bv);
  String bpayload = String(bv); 
  bpayload.toCharArray( battributes, 100 );
//IF Battery is low but not critical
  if (bv < 1900){
    if (!client.connected()) 
    {
      NetworkConnect();
      mqttconnect();
    }
  delay(2000); 
  client.publish( "Data/Soil/Batt", battributes );
  Serial.println( battributes );
//Off to sleep for 1hr
  esp_sleep_enable_timer_wakeup(TIME_TO_BATT_SLEEP * uS_TO_S_FACTOR);
  Serial.println("Low Battery going to sleep now for an hour " + String(TIME_TO_BATT_SLEEP) +
  " Seconds");
  delay(1000);
  Serial.flush(); 
  esp_deep_sleep_start();
  }
//If the Battery keeps falling sleep for 3 hrs
  if (bv < 1800){
    if (!client.connected()) 
    {
      NetworkConnect();
      mqttconnect();
    }

  client.publish( "Data/Soil/Batt", battributes );
  Serial.println( battributes );
//Off to sleep for 3hrs
  esp_sleep_enable_timer_wakeup(TIME_TO_DEEPBATT_SLEEP * uS_TO_S_FACTOR);
  Serial.println("Low Battery going to sleep now for (3hrs) " + String(TIME_TO_DEEPBATT_SLEEP) + " Seconds");
  Serial.flush(); 
  esp_deep_sleep_start();
  }
}

void getmoisture(){
 int i;      
 int sv;
 char attributes[100];
 sv= 0;
//Takes 10 soil readings and averages them out
  for(i=0;i<10;i++) {
    delay(500); 
    soilValue = analogRead(soilPin);
    Serial.println(soilValue);
    sv = sv + soilValue;
  }
  sv = sv/10;
  Serial.println("SoilValue is  " + Serial.println(sv));
//Check network connection
  if (!client.connected()) {
    NetworkConnect();
    mqttconnect();
  }
//MQTT publish
  delay(3000); 
  String spayload = String(sv); 
  spayload.toCharArray( attributes, 100 );
  client.publish( "Data/Soil", attributes );
  Serial.println( attributes );
  client.publish( "Data/Soil/Batt", battributes );
  Serial.println( battributes );
  delay(1000);
//Sleeps for 30min between readings
  esp_sleep_enable_timer_wakeup(TIME_TO_SOIL_SLEEP * uS_TO_S_FACTOR);
  Serial.println("All finished going to sleep now for " + String(TIME_TO_SOIL_SLEEP) +
  " Seconds");
  Serial.flush(); 
  esp_deep_sleep_start();  
}

void setup()
{
  Serial.begin(115200);
  delay(1000); //Take some time to open up the Serial Monitor
//MQTT setup stopps -2 Error
  client.setServer(mqtt_server,mqtt_port);
  client.setCallback(callback);
//Increment boot number and print it every reboot
  ++bootCount; 
  Serial.println("Boot number: " + String(bootCount));
//Print the wakeup reason for ESP32
  print_wakeup_reason();
//Run the Batt level and moisture code
  getbatt();
  getmoisture();
//Test to make sure the sleep is working
  Serial.println("This will never be printed");
}

void loop() {
}
